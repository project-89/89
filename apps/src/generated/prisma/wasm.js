
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  username: 'username',
  bio: 'bio',
  avatar: 'avatar',
  isPublic: 'isPublic',
  socialLinks: 'socialLinks',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FingerprintScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  fingerprint: 'fingerprint',
  roles: 'roles',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  avatar: 'avatar',
  isActive: 'isActive',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VisitScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  fingerprintId: 'fingerprintId',
  path: 'path',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  referrer: 'referrer',
  duration: 'duration',
  createdAt: 'createdAt'
};

exports.Prisma.ImpressionScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  type: 'type',
  context: 'context',
  createdAt: 'createdAt'
};

exports.Prisma.SocialProfileScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  platform: 'platform',
  username: 'username',
  url: 'url',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KnowledgeScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  title: 'title',
  content: 'content',
  type: 'type',
  source: 'source',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MissionScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  result: 'result',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Proxim8UserScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  username: 'username',
  email: 'email',
  bio: 'bio',
  avatar: 'avatar',
  isPublic: 'isPublic',
  isAdmin: 'isAdmin',
  socialLinks: 'socialLinks',
  preferences: 'preferences',
  stats: 'stats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  nftId: 'nftId',
  jobId: 'jobId',
  status: 'status',
  title: 'title',
  description: 'description',
  videoUrl: 'videoUrl',
  thumbnailUrl: 'thumbnailUrl',
  duration: 'duration',
  fileSize: 'fileSize',
  resolution: 'resolution',
  isPublic: 'isPublic',
  metadata: 'metadata',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NFTOwnershipScalarFieldEnum = {
  id: 'id',
  nftId: 'nftId',
  accountId: 'accountId',
  walletAddress: 'walletAddress',
  contractAddress: 'contractAddress',
  tokenId: 'tokenId',
  blockchain: 'blockchain',
  verified: 'verified',
  lastVerified: 'lastVerified',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoreScalarFieldEnum = {
  id: 'id',
  nftId: 'nftId',
  title: 'title',
  content: 'content',
  background: 'background',
  traits: 'traits',
  claimed: 'claimed',
  claimedBy: 'claimedBy',
  claimedAt: 'claimedAt',
  category: 'category',
  tags: 'tags',
  isPublic: 'isPublic',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PipelineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  status: 'status',
  config: 'config',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PublicVideoScalarFieldEnum = {
  id: 'id',
  videoId: 'videoId',
  title: 'title',
  description: 'description',
  thumbnailUrl: 'thumbnailUrl',
  videoUrl: 'videoUrl',
  nftId: 'nftId',
  walletAddress: 'walletAddress',
  views: 'views',
  likes: 'likes',
  featured: 'featured',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameAgentScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  codename: 'codename',
  rank: 'rank',
  timelinePoints: 'timelinePoints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameProxim8ScalarFieldEnum = {
  id: 'id',
  gameAgentId: 'gameAgentId',
  nftId: 'nftId',
  name: 'name',
  personality: 'personality',
  level: 'level',
  experience: 'experience',
  isDeployed: 'isDeployed',
  lastMissionAt: 'lastMissionAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingMissionDeploymentScalarFieldEnum = {
  id: 'id',
  deploymentId: 'deploymentId',
  missionId: 'missionId',
  gameAgentId: 'gameAgentId',
  gameProxim8Id: 'gameProxim8Id',
  approach: 'approach',
  deployedAt: 'deployedAt',
  completesAt: 'completesAt',
  duration: 'duration',
  status: 'status',
  currentPhase: 'currentPhase',
  finalSuccessRate: 'finalSuccessRate',
  phaseOutcomes: 'phaseOutcomes',
  result: 'result',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  stats: 'stats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NFTScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingMissionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.MissionStatus = exports.$Enums.MissionStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.VideoStatus = exports.$Enums.VideoStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  VIDEO_COMPLETED: 'VIDEO_COMPLETED',
  VIDEO_FAILED: 'VIDEO_FAILED',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  NFT_VERIFIED: 'NFT_VERIFIED',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  MISSION_COMPLETED: 'MISSION_COMPLETED'
};

exports.PipelineType = exports.$Enums.PipelineType = {
  VIDEO_GENERATION: 'VIDEO_GENERATION',
  DATA_PROCESSING: 'DATA_PROCESSING',
  NOTIFICATION: 'NOTIFICATION',
  ANALYTICS: 'ANALYTICS'
};

exports.PipelineStatus = exports.$Enums.PipelineStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ERROR: 'ERROR',
  MAINTENANCE: 'MAINTENANCE'
};

exports.AgentRank = exports.$Enums.AgentRank = {
  OBSERVER: 'OBSERVER',
  FIELD_AGENT: 'FIELD_AGENT',
  SENIOR_AGENT: 'SENIOR_AGENT',
  ARCHITECT: 'ARCHITECT'
};

exports.Proxim8Personality = exports.$Enums.Proxim8Personality = {
  ANALYTICAL: 'ANALYTICAL',
  AGGRESSIVE: 'AGGRESSIVE',
  DIPLOMATIC: 'DIPLOMATIC',
  ADAPTIVE: 'ADAPTIVE'
};

exports.MissionApproach = exports.$Enums.MissionApproach = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.DeploymentStatus = exports.$Enums.DeploymentStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ABANDONED: 'ABANDONED'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Profile: 'Profile',
  Fingerprint: 'Fingerprint',
  Agent: 'Agent',
  Visit: 'Visit',
  Impression: 'Impression',
  SocialProfile: 'SocialProfile',
  Knowledge: 'Knowledge',
  Mission: 'Mission',
  Proxim8User: 'Proxim8User',
  Video: 'Video',
  Notification: 'Notification',
  NFTOwnership: 'NFTOwnership',
  Lore: 'Lore',
  Pipeline: 'Pipeline',
  PublicVideo: 'PublicVideo',
  GameAgent: 'GameAgent',
  GameProxim8: 'GameProxim8',
  TrainingMissionDeployment: 'TrainingMissionDeployment',
  UserStats: 'UserStats',
  NFT: 'NFT',
  TrainingMission: 'TrainingMission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
